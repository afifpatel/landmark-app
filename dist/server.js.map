{"version":3,"sources":["../server.js"],"names":["install","path","require","app","use","json","PORT","process","env","db","connect","MONGODB_URI","then","client","listen","console","log","catch","error","get","req","res","filter","query","owner","text","collection","find","toArray","landmarks","metadata","total_count","length","_metadata","records","status","message","issueId","params","id","_id","limit","next","issue","post","newLandmark","body","date","Date","location","lat","parseFloat","lng","JSON","stringify","insertOne","result","findOne","insertedId","query_result","count","new_landmark","err","put","landmarkId","landmark","updateOne","$set","savedLandmark","delete","deleteOne","deleteResult","n","errror","sendFile","resolve"],"mappings":"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","file":"server.js","sourcesContent":["// const express =  require('express');\n// const bodyParser= require('body-parser');\n// const MongoClient = require('mongodb').MongoClient;\n// const Issue = require('./issue.js');\n\n\nimport express from 'express';                          //ES2015 \nimport bodyParser from 'body-parser';                   //ES2015 \nimport { MongoClient, ObjectId } from 'mongodb';                  //ES2015 \nimport Issue from './issue.js'                          //ES2015 \nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';   //To let Node.js report line numbers by using source maps, we need to install thesource-map-support module, and also call the library in the application once\nSourceMapSupport.install();\n\n//deployment changes\nconst path = require(\"path\")\n\nconst app = express();\n// app.use(express.static('static'));\napp.use(bodyParser.json());\n\n//deployment change\n// app.use(express.static(path.join(__dirname, \"client\", \"build\")))\n\n//deployment change\n// app.get(\"*\", (req, res) => {\n//     res.sendFile(path.resolve('static/index.html'));\n// });\n\n//deployment change\n\nconst PORT = process.env.PORT || 3000;\nlet db;\nMongoClient.connect(process.env.MONGODB_URI || 'mongodb://localhost').then(client => {\n    db = client.db('lmr');\n    app.listen(PORT, () => {\n        console.log('App startedddddd on port 3000');\n    });\n}).catch(error => {\n    console.log('ERROR:', error);\n});\n\napp.get('/api/landmarks', (req,res) => {\n    const filter = {};\n    \n    if (req.query.owner) filter.owner = req.query.owner\n\n    if (req.query.text) {\n        filter['$text'] = {  \"$search\" : req.query.text }\n        // console.log(\"Text filter\", filter)\n    }\n    console.log(\"Text filter\", filter)\n    db.collection('lmr').find(filter).toArray().then( landmarks => {\n        const metadata = { total_count: landmarks.length };\n        res.json({ _metadata: metadata, records : landmarks})\n    }).catch(error =>{\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n });\n\napp.get('/api/landmark/:id', (req,res) =>{\n        let issueId;\n        console.log(\"PARAMSSS \", req.params)\n        try {\n            issueId = new ObjectId(req.params.id);\n        } catch (error){\n            res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n            return;\n        }\n        \n        db.collection('lmr').find({ _id : issueId }).limit(1)\n        .next()\n        .then( issue => { \n            console.log(\"landmark retrieved from data \", issue)\n            if (!issue) res.status(404).json({ message: `No such issue: ${issueId}` });\n            else res.json(issue);\n        })\n        .catch( error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        });\n    });\n \napp.post('/api/landmark', (req,res) => {\n    const newLandmark = req.body;\n    newLandmark.date = new Date();\n    newLandmark.location.lat= parseFloat(newLandmark.location.lat);\n    newLandmark.location.lng= parseFloat(newLandmark.location.lng)\n   console.log(JSON.stringify(newLandmark));\n    \n    db.collection('lmr').insertOne(newLandmark).then( result => \n        db.collection('lmr').findOne({ _id: result.insertedId })).then( query_result => \n            db.collection('lmr').count().then( metadata => \n                res.json({ _metadata: metadata , new_landmark : query_result})        \n            )        \n        ).catch(err =>{\n        console.log(err);\n        res.status(500).json({ message: `Internal Server Error: ${err}` });\n    });\n});\n\n\napp.put('/api/landmark/:id', (req, res) => {\n  let landmarkId;\n  try {\n    landmarkId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  const landmark = req.body;\n  console.log(\"landmark put req body\",landmark);\n\n\n  delete landmark._id;\n\n//   console.log(\"issue =>\",issue);\nif(landmark.location){\nlandmark.location.lat= parseFloat(landmark.location.lat);\nlandmark.location.lng= parseFloat(landmark.location.lng)\n}\n// landmark.date = new Date(landmark.date);\nlandmark.date = new Date();     //Last Updated\n\n\nconsole.log(JSON.stringify(landmark));\n\n//   const err = Issue.validateIssue(landmark);\n//   if (err) {\n//     res.status(422).json({ message: `Invalid request: ${err}` });\n//     return;\n//   }\n\n  db.collection('lmr').updateOne({ _id: landmarkId }, { $set : landmark}).then(() =>\n    db.collection('lmr').find({ _id: landmarkId }).limit(1)\n    .next()\n  )\n  .then(savedLandmark => {\n    res.json(savedLandmark);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.delete('/api/landmark/:id', (req,res) => {\n    let landmarkId;\ntry{\n    landmarkId = new ObjectId(req.params.id);\n}\ncatch (error){\n    res.status(422).json({ message : `Invalid issue ID format: ${error}`});\n    return;\n}\n    \n    db.collection('lmr').deleteOne({ _id : landmarkId }).then( deleteResult => {\n        if(deleteResult.result.n === 1) res.json({ status: 'OK'});\n        else res.json({ status: 'Warning: object not found' });\n    })\n    .catch( error => {\n        console.log(error);\n        res.status(500).json({ message : `Internal Server Error: ${errror}` });\n    });\n});\n\napp.get('*', (req, res) => {\n    res.sendFile(path.resolve('client/public/index.html'));\n});\n"]}